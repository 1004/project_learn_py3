"""
模块
内置模块

自定义模块

第三方模块

-------------------

导入包的三要素
1.  生成包的命名空间
2.  执行对应包的模块，模块内的变量各种初始化
3.  将模块导入到当前的命名空间下，并且可以引用或者堆对象地址赋值到当前模块

引用：引用包的生成的变量空间    加载：加载模块到内存     使用： 当前空间可以使用模块内的东西


--------------------
模块查找优先级: 执行文件为标志

先内存 查找

在硬盘查找
"""

import m1  # 导入m1 命名空间

print(m1.get())  # 调用m1 空间的get函数   当前空间和mi空间是隔离的

print(m1.change())
print(m1.get())

from m2 import x  # 从m2 空间下导入x对应值的地址 给到当前命名空间变了x  ，相当于2个命名空间执行一个堆内存地址

print(x)

import sys

print(sys.path)  # 寻找路径  ，基本上就一个-->就是当前文件所在的目录开始查找
print(sys.modules)  # 已经加装进来的模块

#绝对万能方法

# sys.path.append("xxx")  导入对应的模块 就可以访问了


"""
找不在当前目录的模块

sys.path.append(模块所在的绝对路径)
"""

"""
模块的规范

文档描述
import 导入模块
定义类
定义函数
if __name__ == '__main__'

"""
